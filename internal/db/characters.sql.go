// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: characters.sql

package db

import (
	"context"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO
    characters (
        user_id,
        name,
        class,
        level,
        max_hp,
        current_hp,
        strength,
        dexterity,
        constitution,
        intelligence,
        wisdom,
        charisma,
        experience_points,
        platinum_pieces,
        gold_pieces,
        electrum_pieces,
        silver_pieces,
        copper_pieces
    )
VALUES
    (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    ) RETURNING id, user_id, name, class, level, max_hp, current_hp, strength, dexterity, constitution, intelligence, wisdom, charisma, created_at, updated_at, experience_points, platinum_pieces, gold_pieces, electrum_pieces, silver_pieces, copper_pieces
`

type CreateCharacterParams struct {
	UserID           int64  `json:"user_id"`
	Name             string `json:"name"`
	Class            string `json:"class"`
	Level            int64  `json:"level"`
	MaxHp            int64  `json:"max_hp"`
	CurrentHp        int64  `json:"current_hp"`
	Strength         int64  `json:"strength"`
	Dexterity        int64  `json:"dexterity"`
	Constitution     int64  `json:"constitution"`
	Intelligence     int64  `json:"intelligence"`
	Wisdom           int64  `json:"wisdom"`
	Charisma         int64  `json:"charisma"`
	ExperiencePoints int64  `json:"experience_points"`
	PlatinumPieces   int64  `json:"platinum_pieces"`
	GoldPieces       int64  `json:"gold_pieces"`
	ElectrumPieces   int64  `json:"electrum_pieces"`
	SilverPieces     int64  `json:"silver_pieces"`
	CopperPieces     int64  `json:"copper_pieces"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter,
		arg.UserID,
		arg.Name,
		arg.Class,
		arg.Level,
		arg.MaxHp,
		arg.CurrentHp,
		arg.Strength,
		arg.Dexterity,
		arg.Constitution,
		arg.Intelligence,
		arg.Wisdom,
		arg.Charisma,
		arg.ExperiencePoints,
		arg.PlatinumPieces,
		arg.GoldPieces,
		arg.ElectrumPieces,
		arg.SilverPieces,
		arg.CopperPieces,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Class,
		&i.Level,
		&i.MaxHp,
		&i.CurrentHp,
		&i.Strength,
		&i.Dexterity,
		&i.Constitution,
		&i.Intelligence,
		&i.Wisdom,
		&i.Charisma,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExperiencePoints,
		&i.PlatinumPieces,
		&i.GoldPieces,
		&i.ElectrumPieces,
		&i.SilverPieces,
		&i.CopperPieces,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters
WHERE
    id = ?
    AND user_id = ?
`

type DeleteCharacterParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteCharacter(ctx context.Context, arg DeleteCharacterParams) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, arg.ID, arg.UserID)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT
    id, user_id, name, class, level, max_hp, current_hp, strength, dexterity, constitution, intelligence, wisdom, charisma, created_at, updated_at, experience_points, platinum_pieces, gold_pieces, electrum_pieces, silver_pieces, copper_pieces
FROM
    characters
WHERE
    id = ?
    AND user_id = ?
LIMIT
    1
`

type GetCharacterParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetCharacter(ctx context.Context, arg GetCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, arg.ID, arg.UserID)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Class,
		&i.Level,
		&i.MaxHp,
		&i.CurrentHp,
		&i.Strength,
		&i.Dexterity,
		&i.Constitution,
		&i.Intelligence,
		&i.Wisdom,
		&i.Charisma,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExperiencePoints,
		&i.PlatinumPieces,
		&i.GoldPieces,
		&i.ElectrumPieces,
		&i.SilverPieces,
		&i.CopperPieces,
	)
	return i, err
}

const listCharactersByUser = `-- name: ListCharactersByUser :many
SELECT
    id, user_id, name, class, level, max_hp, current_hp, strength, dexterity, constitution, intelligence, wisdom, charisma, created_at, updated_at, experience_points, platinum_pieces, gold_pieces, electrum_pieces, silver_pieces, copper_pieces
FROM
    characters
WHERE
    user_id = ?
ORDER BY
    name
`

func (q *Queries) ListCharactersByUser(ctx context.Context, userID int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Class,
			&i.Level,
			&i.MaxHp,
			&i.CurrentHp,
			&i.Strength,
			&i.Dexterity,
			&i.Constitution,
			&i.Intelligence,
			&i.Wisdom,
			&i.Charisma,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExperiencePoints,
			&i.PlatinumPieces,
			&i.GoldPieces,
			&i.ElectrumPieces,
			&i.SilverPieces,
			&i.CopperPieces,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacter = `-- name: UpdateCharacter :one
UPDATE characters
SET
    name = ?,
    class = ?,
    level = ?,
    max_hp = ?,
    current_hp = ?,
    strength = ?,
    dexterity = ?,
    constitution = ?,
    intelligence = ?,
    wisdom = ?,
    charisma = ?,
    experience_points = ?,
    platinum_pieces = ?,
    gold_pieces = ?,
    electrum_pieces = ?,
    silver_pieces = ?,
    copper_pieces = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?
    AND user_id = ? RETURNING id, user_id, name, class, level, max_hp, current_hp, strength, dexterity, constitution, intelligence, wisdom, charisma, created_at, updated_at, experience_points, platinum_pieces, gold_pieces, electrum_pieces, silver_pieces, copper_pieces
`

type UpdateCharacterParams struct {
	Name             string `json:"name"`
	Class            string `json:"class"`
	Level            int64  `json:"level"`
	MaxHp            int64  `json:"max_hp"`
	CurrentHp        int64  `json:"current_hp"`
	Strength         int64  `json:"strength"`
	Dexterity        int64  `json:"dexterity"`
	Constitution     int64  `json:"constitution"`
	Intelligence     int64  `json:"intelligence"`
	Wisdom           int64  `json:"wisdom"`
	Charisma         int64  `json:"charisma"`
	ExperiencePoints int64  `json:"experience_points"`
	PlatinumPieces   int64  `json:"platinum_pieces"`
	GoldPieces       int64  `json:"gold_pieces"`
	ElectrumPieces   int64  `json:"electrum_pieces"`
	SilverPieces     int64  `json:"silver_pieces"`
	CopperPieces     int64  `json:"copper_pieces"`
	ID               int64  `json:"id"`
	UserID           int64  `json:"user_id"`
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, updateCharacter,
		arg.Name,
		arg.Class,
		arg.Level,
		arg.MaxHp,
		arg.CurrentHp,
		arg.Strength,
		arg.Dexterity,
		arg.Constitution,
		arg.Intelligence,
		arg.Wisdom,
		arg.Charisma,
		arg.ExperiencePoints,
		arg.PlatinumPieces,
		arg.GoldPieces,
		arg.ElectrumPieces,
		arg.SilverPieces,
		arg.CopperPieces,
		arg.ID,
		arg.UserID,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Class,
		&i.Level,
		&i.MaxHp,
		&i.CurrentHp,
		&i.Strength,
		&i.Dexterity,
		&i.Constitution,
		&i.Intelligence,
		&i.Wisdom,
		&i.Charisma,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExperiencePoints,
		&i.PlatinumPieces,
		&i.GoldPieces,
		&i.ElectrumPieces,
		&i.SilverPieces,
		&i.CopperPieces,
	)
	return i, err
}
