// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weaponMastery.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addWeaponMastery = `-- name: AddWeaponMastery :one
INSERT INTO
    character_weapon_masteries (character_id, weapon_id, mastery_level)
VALUES
    (?, ?, ?) RETURNING id, character_id, weapon_id, mastery_level, created_at, updated_at
`

type AddWeaponMasteryParams struct {
	CharacterID  int64  `json:"character_id"`
	WeaponID     int64  `json:"weapon_id"`
	MasteryLevel string `json:"mastery_level"`
}

func (q *Queries) AddWeaponMastery(ctx context.Context, arg AddWeaponMasteryParams) (CharacterWeaponMastery, error) {
	row := q.db.QueryRowContext(ctx, addWeaponMastery, arg.CharacterID, arg.WeaponID, arg.MasteryLevel)
	var i CharacterWeaponMastery
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.WeaponID,
		&i.MasteryLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCharacterWeaponMasteries = `-- name: GetCharacterWeaponMasteries :many
SELECT
    cwm.id, cwm.character_id, cwm.weapon_id, cwm.mastery_level, cwm.created_at, cwm.updated_at,
    w.name as weapon_name,
    w.damage as base_damage,
    w.attacks_per_round as base_attacks
FROM
    character_weapon_masteries cwm
    JOIN weapons w ON cwm.weapon_id = w.id
WHERE
    cwm.character_id = ?
ORDER BY
    w.name
`

type GetCharacterWeaponMasteriesRow struct {
	ID           int64          `json:"id"`
	CharacterID  int64          `json:"character_id"`
	WeaponID     int64          `json:"weapon_id"`
	MasteryLevel string         `json:"mastery_level"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	WeaponName   string         `json:"weapon_name"`
	BaseDamage   string         `json:"base_damage"`
	BaseAttacks  sql.NullString `json:"base_attacks"`
}

func (q *Queries) GetCharacterWeaponMasteries(ctx context.Context, characterID int64) ([]GetCharacterWeaponMasteriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCharacterWeaponMasteries, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCharacterWeaponMasteriesRow
	for rows.Next() {
		var i GetCharacterWeaponMasteriesRow
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.WeaponID,
			&i.MasteryLevel,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WeaponName,
			&i.BaseDamage,
			&i.BaseAttacks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeaponMastery = `-- name: GetWeaponMastery :one
SELECT
    cwm.id, cwm.character_id, cwm.weapon_id, cwm.mastery_level, cwm.created_at, cwm.updated_at,
    w.name as weapon_name,
    w.damage as base_damage,
    w.attacks_per_round as base_attacks
FROM
    character_weapon_masteries cwm
    JOIN weapons w ON cwm.weapon_id = w.id
WHERE
    cwm.character_id = ?
    AND cwm.weapon_id = ?
LIMIT
    1
`

type GetWeaponMasteryParams struct {
	CharacterID int64 `json:"character_id"`
	WeaponID    int64 `json:"weapon_id"`
}

type GetWeaponMasteryRow struct {
	ID           int64          `json:"id"`
	CharacterID  int64          `json:"character_id"`
	WeaponID     int64          `json:"weapon_id"`
	MasteryLevel string         `json:"mastery_level"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	WeaponName   string         `json:"weapon_name"`
	BaseDamage   string         `json:"base_damage"`
	BaseAttacks  sql.NullString `json:"base_attacks"`
}

func (q *Queries) GetWeaponMastery(ctx context.Context, arg GetWeaponMasteryParams) (GetWeaponMasteryRow, error) {
	row := q.db.QueryRowContext(ctx, getWeaponMastery, arg.CharacterID, arg.WeaponID)
	var i GetWeaponMasteryRow
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.WeaponID,
		&i.MasteryLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WeaponName,
		&i.BaseDamage,
		&i.BaseAttacks,
	)
	return i, err
}

const removeWeaponMastery = `-- name: RemoveWeaponMastery :exec
DELETE FROM character_weapon_masteries
WHERE
    character_id = ?
    AND weapon_id = ?
`

type RemoveWeaponMasteryParams struct {
	CharacterID int64 `json:"character_id"`
	WeaponID    int64 `json:"weapon_id"`
}

func (q *Queries) RemoveWeaponMastery(ctx context.Context, arg RemoveWeaponMasteryParams) error {
	_, err := q.db.ExecContext(ctx, removeWeaponMastery, arg.CharacterID, arg.WeaponID)
	return err
}

const updateWeaponMastery = `-- name: UpdateWeaponMastery :one
UPDATE character_weapon_masteries
SET
    mastery_level = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE
    character_id = ?
    AND weapon_id = ? RETURNING id, character_id, weapon_id, mastery_level, created_at, updated_at
`

type UpdateWeaponMasteryParams struct {
	MasteryLevel string `json:"mastery_level"`
	CharacterID  int64  `json:"character_id"`
	WeaponID     int64  `json:"weapon_id"`
}

func (q *Queries) UpdateWeaponMastery(ctx context.Context, arg UpdateWeaponMasteryParams) (CharacterWeaponMastery, error) {
	row := q.db.QueryRowContext(ctx, updateWeaponMastery, arg.MasteryLevel, arg.CharacterID, arg.WeaponID)
	var i CharacterWeaponMastery
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.WeaponID,
		&i.MasteryLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
