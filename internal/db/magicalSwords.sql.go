// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: magicalSwords.sql

package db

import (
	"context"
	"database/sql"
)

const addMagicalWeaponToInventory = `-- name: AddMagicalWeaponToInventory :one
INSERT INTO
    character_inventory (
        character_id,
        item_type,
        item_id,
        magical_weapon_id,
        quantity,
        container_inventory_id,
        equipment_slot_id,
        notes
    )
VALUES
    (
        ?, -- character_id
        'weapon',
        (
            SELECT
                base_weapon_id
            FROM
                magical_weapons
            WHERE
                magical_weapons.id = ?
        ), -- item_id from magical weapon
        ?, -- magical_weapon_id
        ?, -- quantity
        ?, -- container_inventory_id
        ?, -- equipment_slot_id
        ? -- notes
    ) RETURNING id, character_id, item_type, item_id, quantity, container_inventory_id, equipment_slot_id, notes, created_at, updated_at, magical_weapon_id
`

type AddMagicalWeaponToInventoryParams struct {
	CharacterID          int64          `json:"character_id"`
	ID                   int64          `json:"id"`
	MagicalWeaponID      sql.NullInt64  `json:"magical_weapon_id"`
	Quantity             int64          `json:"quantity"`
	ContainerInventoryID sql.NullInt64  `json:"container_inventory_id"`
	EquipmentSlotID      sql.NullInt64  `json:"equipment_slot_id"`
	Notes                sql.NullString `json:"notes"`
}

func (q *Queries) AddMagicalWeaponToInventory(ctx context.Context, arg AddMagicalWeaponToInventoryParams) (CharacterInventory, error) {
	row := q.db.QueryRowContext(ctx, addMagicalWeaponToInventory,
		arg.CharacterID,
		arg.ID,
		arg.MagicalWeaponID,
		arg.Quantity,
		arg.ContainerInventoryID,
		arg.EquipmentSlotID,
		arg.Notes,
	)
	var i CharacterInventory
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.ItemType,
		&i.ItemID,
		&i.Quantity,
		&i.ContainerInventoryID,
		&i.EquipmentSlotID,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MagicalWeaponID,
	)
	return i, err
}

const getMagicalWeapon = `-- name: GetMagicalWeapon :one
SELECT
    mw.id as magical_weapon_id,
    mw.base_weapon_id,
    mw.enhancement_bonus,
    mw.cost_gp,
    mw.xp_value,
    mw.created_at,
    mw.updated_at,
    w.id as weapon_id,
    w.name as base_weapon_name,
    w.damage as base_damage,
    w.attacks_per_round as base_attacks,
    w.weight
FROM
    magical_weapons mw
    JOIN weapons w ON mw.base_weapon_id = w.id
WHERE
    mw.id = ?
`

type GetMagicalWeaponRow struct {
	MagicalWeaponID  int64          `json:"magical_weapon_id"`
	BaseWeaponID     int64          `json:"base_weapon_id"`
	EnhancementBonus int64          `json:"enhancement_bonus"`
	CostGp           int64          `json:"cost_gp"`
	XpValue          int64          `json:"xp_value"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
	WeaponID         int64          `json:"weapon_id"`
	BaseWeaponName   string         `json:"base_weapon_name"`
	BaseDamage       string         `json:"base_damage"`
	BaseAttacks      sql.NullString `json:"base_attacks"`
	Weight           int64          `json:"weight"`
}

func (q *Queries) GetMagicalWeapon(ctx context.Context, id int64) (GetMagicalWeaponRow, error) {
	row := q.db.QueryRowContext(ctx, getMagicalWeapon, id)
	var i GetMagicalWeaponRow
	err := row.Scan(
		&i.MagicalWeaponID,
		&i.BaseWeaponID,
		&i.EnhancementBonus,
		&i.CostGp,
		&i.XpValue,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WeaponID,
		&i.BaseWeaponName,
		&i.BaseDamage,
		&i.BaseAttacks,
		&i.Weight,
	)
	return i, err
}

const getMagicalWeapons = `-- name: GetMagicalWeapons :many
SELECT
    mw.id as magical_weapon_id,
    mw.base_weapon_id,
    mw.enhancement_bonus,
    mw.cost_gp,
    mw.xp_value,
    mw.created_at,
    mw.updated_at,
    w.id as weapon_id,
    w.name as base_weapon_name,
    w.damage as base_damage,
    w.attacks_per_round as base_attacks,
    w.weight
FROM
    magical_weapons mw
    JOIN weapons w ON mw.base_weapon_id = w.id
ORDER BY
    w.name,
    mw.enhancement_bonus
`

type GetMagicalWeaponsRow struct {
	MagicalWeaponID  int64          `json:"magical_weapon_id"`
	BaseWeaponID     int64          `json:"base_weapon_id"`
	EnhancementBonus int64          `json:"enhancement_bonus"`
	CostGp           int64          `json:"cost_gp"`
	XpValue          int64          `json:"xp_value"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
	WeaponID         int64          `json:"weapon_id"`
	BaseWeaponName   string         `json:"base_weapon_name"`
	BaseDamage       string         `json:"base_damage"`
	BaseAttacks      sql.NullString `json:"base_attacks"`
	Weight           int64          `json:"weight"`
}

func (q *Queries) GetMagicalWeapons(ctx context.Context) ([]GetMagicalWeaponsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMagicalWeapons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMagicalWeaponsRow
	for rows.Next() {
		var i GetMagicalWeaponsRow
		if err := rows.Scan(
			&i.MagicalWeaponID,
			&i.BaseWeaponID,
			&i.EnhancementBonus,
			&i.CostGp,
			&i.XpValue,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WeaponID,
			&i.BaseWeaponName,
			&i.BaseDamage,
			&i.BaseAttacks,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
