// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: items.sql

package db

import (
	"context"
	"database/sql"
)

const getAmmunitionItems = `-- name: GetAmmunitionItems :many
SELECT
    id,
    name,
    COALESCE(weight, 0) as weight,
    cost_gp
FROM
    ammunition
ORDER BY
    name
`

type GetAmmunitionItemsRow struct {
	ID     int64   `json:"id"`
	Name   string  `json:"name"`
	Weight int64   `json:"weight"`
	CostGp float64 `json:"cost_gp"`
}

func (q *Queries) GetAmmunitionItems(ctx context.Context) ([]GetAmmunitionItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAmmunitionItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAmmunitionItemsRow
	for rows.Next() {
		var i GetAmmunitionItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.CostGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArmorItems = `-- name: GetArmorItems :many
SELECT
    id,
    name,
    weight,
    cost_gp
FROM
    armor
ORDER BY
    name
`

type GetArmorItemsRow struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Weight int64  `json:"weight"`
	CostGp int64  `json:"cost_gp"`
}

func (q *Queries) GetArmorItems(ctx context.Context) ([]GetArmorItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getArmorItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArmorItemsRow
	for rows.Next() {
		var i GetArmorItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.CostGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContainerItems = `-- name: GetContainerItems :many
SELECT
    id,
    name,
    COALESCE(weight, 0) as weight,
    cost_gp
FROM
    containers
ORDER BY
    name
`

type GetContainerItemsRow struct {
	ID     int64   `json:"id"`
	Name   string  `json:"name"`
	Weight int64   `json:"weight"`
	CostGp float64 `json:"cost_gp"`
}

func (q *Queries) GetContainerItems(ctx context.Context) ([]GetContainerItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getContainerItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetContainerItemsRow
	for rows.Next() {
		var i GetContainerItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.CostGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEquipmentItems = `-- name: GetEquipmentItems :many
SELECT
    id,
    name,
    COALESCE(weight, 0) as weight,
    cost_gp
FROM
    equipment
ORDER BY
    name
`

type GetEquipmentItemsRow struct {
	ID     int64   `json:"id"`
	Name   string  `json:"name"`
	Weight int64   `json:"weight"`
	CostGp float64 `json:"cost_gp"`
}

func (q *Queries) GetEquipmentItems(ctx context.Context) ([]GetEquipmentItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEquipmentItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEquipmentItemsRow
	for rows.Next() {
		var i GetEquipmentItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.CostGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRangedWeaponItems = `-- name: GetRangedWeaponItems :many
SELECT
    id,
    name,
    weight,
    cost_gp
FROM
    ranged_weapons
ORDER BY
    name
`

type GetRangedWeaponItemsRow struct {
	ID     int64         `json:"id"`
	Name   string        `json:"name"`
	Weight int64         `json:"weight"`
	CostGp sql.NullInt64 `json:"cost_gp"`
}

func (q *Queries) GetRangedWeaponItems(ctx context.Context) ([]GetRangedWeaponItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRangedWeaponItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRangedWeaponItemsRow
	for rows.Next() {
		var i GetRangedWeaponItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.CostGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShieldItems = `-- name: GetShieldItems :many
SELECT
    id,
    name,
    weight,
    cost_gp
FROM
    shields
ORDER BY
    name
`

type GetShieldItemsRow struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Weight int64  `json:"weight"`
	CostGp int64  `json:"cost_gp"`
}

func (q *Queries) GetShieldItems(ctx context.Context) ([]GetShieldItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getShieldItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShieldItemsRow
	for rows.Next() {
		var i GetShieldItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.CostGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeaponItems = `-- name: GetWeaponItems :many
SELECT
    id,
    name,
    weight,
    cost_gp
FROM
    weapons
ORDER BY
    name
`

type GetWeaponItemsRow struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Weight int64  `json:"weight"`
	CostGp int64  `json:"cost_gp"`
}

func (q *Queries) GetWeaponItems(ctx context.Context) ([]GetWeaponItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getWeaponItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWeaponItemsRow
	for rows.Next() {
		var i GetWeaponItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.CostGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
